name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
        include:
          - platform: macos-latest
            os-name: darwin
            arch: "-m1"
            arch-postcli: "_ARM64"
          - platform: macos-13
            os-name: darwin
            arch: ""
            arch-postcli: ""
          - platform: ubuntu-latest
            os-name: linux
            arch: ""
            arch-postcli: ""
          - platform: windows-latest
            os-name: windows
            arch: ""
            arch-postcli: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21.x'
          cache: 'yarn'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install app dependencies
        run: yarn install

      - name: Create binary directories
        run: |
          mkdir -p src-tauri/bin/profiler
          mkdir -p src-tauri/bin/postcli

      - name: Get latest version and URL of profiler
        id: profiler
        shell: bash
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/spacemeshos/post-rs/releases/latest | grep '"tag_name":' | sed -E 's/.*"tag_name": ?"([^"]+)".*/\1/')
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to get latest version"
            exit 1
          fi
          echo "::set-output name=version::$LATEST_VERSION"

          # Map OS names to match release asset naming
          case "${{ matrix.os-name }}" in
            "darwin") PLATFORM="macos" ;;
            "linux") PLATFORM="linux" ;;
            "windows") PLATFORM="windows" ;;
          esac
          
          # Construct and verify download URL
          DOWNLOAD_URL="https://github.com/spacemeshos/post-rs/releases/download/${LATEST_VERSION}/profiler-${PLATFORM}${{ matrix.arch }}-${LATEST_VERSION}.zip"
          echo "::set-output name=url::$DOWNLOAD_URL"

      - name: Download profiler binaries
        shell: bash
        run: |
          # Download with error checking
          if ! curl -L --fail -o profiler.zip "${{ steps.profiler.outputs.url }}"; then
            echo "Failed to download profiler binary (from post-rs repo)"
            exit 1
          fi
          
          # Extract with error checking
          if ! unzip -o profiler.zip -d src-tauri/bin/profiler; then
            echo "Failed to extract profiler binary"
            exit 2
          fi
          
          rm profiler.zip

      - name: Get latest version and URL of postcli
        id: postcli
        shell: bash
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/spacemeshos/post/releases/latest | grep '"tag_name":' | sed -E 's/.*"tag_name": ?"([^"]+)".*/\1/')
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to get latest version"
            exit 1
          fi
          echo "::set-output name=version::$LATEST_VERSION"

          # Map OS names to match release asset naming
          case "${{ matrix.os-name }}" in
            "darwin") PLATFORM="macOS" ;;
            "linux") PLATFORM="Linux" ;;
            "windows") PLATFORM="Windows" ;;
          esac
          
          # Construct and verify download URL
          DOWNLOAD_URL="https://github.com/spacemeshos/post/releases/latest/download/postcli-${PLATFORM}${{ matrix.arch-postcli }}.zip"
          echo "::set-output name=url::$DOWNLOAD_URL"

      - name: Download postcli binaries
        shell: bash
        run: |
          # Download with error checking
          if ! curl -L --fail -o postcli.zip "${{ steps.postcli.outputs.url }}"; then
            echo "Failed to download postcli binary"
            exit 1
          fi
          
          # Extract with error checking
          if ! unzip -o postcli.zip -d src-tauri/bin/postcli; then
            echo "Failed to extract postcli binary"
            exit 1
          fi
          
          rm postcli.zip

      - name: Install gtk3 (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true  
          prerelease: false
