name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v3
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
        include:
          - platform: macos-latest
            os-name: darwin
            archive-ext: zip
          - platform: windows-latest
            os-name: windows
            archive-ext: zip

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21.x'
          cache: 'yarn'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install app dependencies
        run: yarn install

      - name: Create binary directories
        run: |
          mkdir -p src-tauri/bin/post-rs
          mkdir -p src-tauri/bin/postcli

      - name: Download post-rs binaries
        run: |
          # Get latest version with error checking
          LATEST_VERSION=$(curl -s https://api.github.com/repos/spacemeshos/post-rs/releases/latest | grep '"tag_name":' | sed -E 's/.*"tag_name": ?"([^"]+)".*/\1/')
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to get latest version"
            exit 1
          fi
          echo "Latest version: $LATEST_VERSION"
          
          # Map OS names to match release asset naming
          case "${{ matrix.os-name }}" in
            "darwin") PLATFORM="Darwin" ;;
            "linux") PLATFORM="Linux" ;;
            "windows") PLATFORM="Windows" ;;
          esac
          
          # Construct and verify download URL
          DOWNLOAD_URL="https://github.com/spacemeshos/post-rs/releases/download/${LATEST_VERSION}/profiler-${PLATFORM}-${LATEST_VERSION}.zip"
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download with error checking
          if ! curl -L --fail -o profiler.zip "$DOWNLOAD_URL"; then
            echo "Failed to download post-rs binary"
            exit 1
          fi
          
          # Extract with error checking
          if ! unzip -o profiler.zip -d src-tauri/bin/post-rs; then
            echo "Failed to extract post-rs binary"
            exit 1
          fi
          
          rm profiler.zip
        shell: bash

      - name: Download postcli binaries
        run: |
          # Map OS names to match release asset naming
          case "${{ matrix.os-name }}" in
            "darwin") PLATFORM="Darwin" ;;
            "linux") PLATFORM="Linux" ;;
            "windows") PLATFORM="Windows" ;;
          esac
          
          # Construct and verify download URL
          DOWNLOAD_URL="https://github.com/spacemeshos/post/releases/latest/download/postcli-${PLATFORM}.zip"
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download with error checking
          if ! curl -L --fail -o postcli.zip "$DOWNLOAD_URL"; then
            echo "Failed to download postcli binary"
            exit 1
          fi
          
          # Extract with error checking
          if ! unzip -o postcli.zip -d src-tauri/bin/postcli; then
            echo "Failed to extract postcli binary"
            exit 1
          fi
          
          rm postcli.zip
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: ${{ github.ref_name }}
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
